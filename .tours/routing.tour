{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "02 - Routing",
  "steps": [
    {
      "title": "Le routage",
      "description": "Le routage est l'√©tape ou l'on extrait l'URL d'une requ√™te HTTP (la route) afin d'appeler la m√©thode de contr√¥leur associ√©e : \r\n\r\n![Schema](./.tours/schema_1_routing.png)"
    },
    {
      "file": "src/routing.php",
      "description": "Pour commencer nous r√©cup√©rons la route demand√©e par notre utilisateur (ce qui n'est autre que l'URL sans la partie concernant le domaine).\r\n\r\nPar exemple :  \r\n`localhost/items/edit?id=5`\r\n- Le domaine est : `localhost`\r\n- La route est : `items/edit?id=5`\r\n\r\nLa route est facilement r√©cup√©rable grace √† $_SERVER. √Ä l'instar de $_GET ou de  $_POST, $_SERVER est un tableau qui contient de nombreuses informations sur le server web (pour en savoir plus : [Doc](https://www.php.net/manual/fr/reserved.variables.server.php)). Ici nous r√©cup√©rons l'index `PATH_INFO`",
      "line": 4,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 49
        }
      }
    },
    {
      "file": "src/routing.php",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 55
        }
      },
      "description": "Afin de savoir quelle partie de notre code appeler, nous devons d'abord charger toutes les routes d√©finies pour notre application. Toutes ses routes sont d√©clar√©es dans `routes.php` "
    },
    {
      "file": "src/routes.php",
      "description": "Dans ce tableau, nous d√©clarons toutes les routes de notre application.\r\n\r\nChaque route appellera une partie sp√©cifique de notre code, et donc pr√©sentera un r√©sultat diff√©rent.\r\n\r\nLe but d'une route est de guider une requ√™te vers une action d'un contr√¥leur.\r\n\r\nPar exemple :",
      "line": 8,
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 16,
          "character": 3
        }
      }
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 11,
          "character": 5
        },
        "end": {
          "line": 11,
          "character": 12
        }
      },
      "description": "Ici nous avons la route `items`. Cela signife que notre application a comme porte d'entr√©e l'URL suivante :\r\n\r\n[http://localhost:8000/items/](http://localhost:8000/items/)"
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 11,
          "character": 17
        },
        "end": {
          "line": 11,
          "character": 33
        }
      },
      "description": "On associe ce point d'entr√©e √† un contr√¥leur : `ItemController`"
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 48
        }
      },
      "description": "Comme tu peux le voir, un contr√¥leur n'est rien d'autre qu'une classe. Elle a n√©anmoins un role cruciale dans notre application MVC : c'est elle qui traite la requ√™te HTTP d'entr√©e, et c'est √©galement elle qui retourne la requ√™te HTTP de r√©ponse."
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 12,
          "character": 4
        },
        "end": {
          "line": 90,
          "character": 6
        }
      },
      "description": "Ce controller a d√©j√† plusieurs fonctions : index(), show(), edit(), ...\r\n\r\nChacune de ces fonctions est une action possible de notre application.\r\n\r\nToutes ces actions retournerons une requ√™te HTTP, qui transportera (ou non) le code HTML de la page √† pr√©senter (nottament grace √† [TWIG](https://twig.symfony.com)).\r\n\r\nBien sur, comme seule une page doit etre retourn√©e, seule une action doit etre appel√©e."
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 11,
          "character": 35
        },
        "end": {
          "line": 11,
          "character": 42
        }
      },
      "description": "Et c'est pr√©cis√©ment le r√¥le de ce second parametre.\n\nIci nous d√©clarons que si on appelle la route `items` (alias [http://localhost:8000/items/](http://localhost:8000/items/)), on appellera alors la function `index()` du contr√¥leur `ItemController`. Le code d√©clench√© sera donc ..."
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 12,
          "character": 5
        },
        "end": {
          "line": 18,
          "character": 6
        }
      },
      "description": "... Celui-ci !\n\n"
    },
    {
      "file": "src/routes.php",
      "description": "Donc maintenant tu sais cr√©er une route simple dans notre application. Beau boulot üí™!\r\n\r\n![But...](./.tours/routing_meme.jpg)\r\n\r\nN√©anmoins, comme les pages ne sont plus seulement statiques √† pr√©sent, tu devras parfois transmettre des informations suppl√©mentaires qui leur permettront de se construire dynamiquement.\r\n\r\nEt c'est pour cette raison que les routes peuvent √©galement prendre des param√®tres üòÉ!",
      "line": 17
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 13,
          "character": 5
        },
        "end": {
          "line": 13,
          "character": 17
        }
      },
      "description": "Cette route par exemple : son but est de pr√©senter les informations d'un item sp√©cifique. Le probl√®me est que dans la base de donn√©es, il pourrait y avoir des millions d'items ! Alors comment ne pr√©senter que l'item que l'on souhaite voir üò∞?"
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 13,
          "character": 48
        },
        "end": {
          "line": 13,
          "character": 54
        }
      },
      "description": "Et bien c'est le r√¥le de ce troisi√®me param√®tre üòé. Grace √† lui on pourra transmettre l'id de l'item sp√©cifique que l'on cherche √† voir.\r\n\r\nComme on peut le voir ce troisi√®me param√®tre est un tableau, c'est √† dire qu'on peut avoir autant de param√®tres que n√©c√©ssaire dans une route."
    },
    {
      "file": "src/routes.php",
      "selection": {
        "start": {
          "line": 13,
          "character": 49
        },
        "end": {
          "line": 13,
          "character": 53
        }
      },
      "description": "Sur cette route il n'y en a qu'un : id\r\n\r\nAussi pour contacter cette page, l'url ressemblera √† ceci : \r\n[http://localhost:8000/items/show?id=1](http://localhost:8000/items/show?id=1)\r\nCes param√®tres suppl√©mentaires sont √† passer via la *query string*."
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 24,
          "character": 5
        },
        "end": {
          "line": 30,
          "character": 6
        }
      },
      "description": "Et l'action show() sera appel√©e."
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 24,
          "character": 26
        },
        "end": {
          "line": 24,
          "character": 33
        }
      },
      "description": "Cette fois la fonction attend un param√®tre en entr√©e.\r\n\r\nEt bien c'est notre router qui lui fournira (d√©s lors qu'on a bien dit dans la route qu'un param√®tre devait etre pass√©).\r\n\r\nDonc si l'URL [http://localhost:8000/items/show?id=1](http://localhost:8000/items/show?id=1) est appel√©e, la valeur de `$id` sera de `1`"
    },
    {
      "file": "src/Controller/ItemController.php",
      "selection": {
        "start": {
          "line": 27,
          "character": 8
        },
        "end": {
          "line": 27,
          "character": 50
        }
      },
      "description": "Ensuite on peut utiliser `$id` pour r√©cup√©rer le bon item dans notre base de donn√©es √† l'aide de notre `ItemManager`(qui appartient √† la couche Mod√®le de notre MVC)"
    }
  ]
}